diff -NBaur physfs-release-3.2.0/CMakeLists.txt physfs-release-3.2.0-new/CMakeLists.txt
--- physfs-release-3.2.0/CMakeLists.txt	2022-09-30 21:13:07.000000000 +0100
+++ physfs-release-3.2.0-new/CMakeLists.txt	2023-03-26 16:19:44.629038704 +0100
@@ -77,6 +77,7 @@
     src/physfs.c
     src/physfs_byteorder.c
     src/physfs_unicode.c
+    src/physfs_platform_3ds.c
     src/physfs_platform_posix.c
     src/physfs_platform_unix.c
     src/physfs_platform_windows.c
diff -NBaur physfs-release-3.2.0/src/physfs_internal.h physfs-release-3.2.0-new/src/physfs_internal.h
--- physfs-release-3.2.0/src/physfs_internal.h	2022-09-30 21:13:07.000000000 +0100
+++ physfs-release-3.2.0-new/src/physfs_internal.h	2023-03-26 16:16:59.634275766 +0100
@@ -108,6 +108,10 @@
 const void *__PHYSFS_winrtCalcPrefDir(void);
 #endif
 
+#ifdef PHYSFS_PLATFORM_3DS
+char *__PHYSFS_3DSCalcUserDir(void);
+#endif
+
 /* atomic operations. */
 /* increment/decrement operations return the final incremented/decremented value. */
 #if defined(_MSC_VER) && (_MSC_VER >= 1500)
diff -NBaur physfs-release-3.2.0/src/physfs_platform_3ds.c physfs-release-3.2.0-new/src/physfs_platform_3ds.c
--- physfs-release-3.2.0/src/physfs_platform_3ds.c	1970-01-01 01:00:00.000000000 +0100
+++ physfs-release-3.2.0-new/src/physfs_platform_3ds.c	2023-03-26 16:16:59.634275766 +0100
@@ -0,0 +1,106 @@
+/*
+ * Nintendo 3DS support routines for PhysicsFS.
+ *
+ * Please see the file LICENSE.txt in the source's root directory.
+ *
+ */
+
+
+#define __PHYSICSFS_INTERNAL__
+#include "physfs_platforms.h"
+
+#ifdef PHYSFS_PLATFORM_3DS
+
+#include <3ds.h>
+
+// for getcwd
+#include <unistd.h>
+// for PATH_MAX
+#include <limits.h>
+
+#include "physfs_internal.h"
+
+int __PHYSFS_platformInit(void)
+{
+	return 1;  /* always succeed. */
+} /* __PHYSFS_platformInit */
+
+
+void __PHYSFS_platformDeinit(void)
+{
+	/* no-op */
+} /* __PHYSFS_platformDeinit */
+
+
+void __PHYSFS_platformDetectAvailableCDs(PHYSFS_StringCallback cb, void *data)
+{
+	/* no-op */
+}
+
+char *__PHYSFS_3DSCalcUserDir(void)
+{
+	/* Use the jail directory (hopefully) found before. */
+	return __PHYSFS_strdup(PHYSFS_getBaseDir());
+}
+
+char *__PHYSFS_platformCalcBaseDir(const char *argv0)
+{
+	char *retval = NULL;
+	/* As there is no system-specific directory, directly inspect argv0. */
+	if (argv0 == NULL)
+	{
+		/* User did not provide a path, just use the current working directory.
+		 *  As physfs should be initialized soon after application start, this
+		 *  should give us a useable directory.
+		 */
+		char fullpath[PATH_MAX];
+		if (getcwd(fullpath, sizeof(fullpath)) != NULL)
+		{
+			const size_t cwdlen = strlen(fullpath);
+			/* getcwd does not provide a trailing slash, add it. */
+			retval = (char*) allocator.Malloc(cwdlen + 2);
+			BAIL_IF(!retval, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+			strncpy(retval, fullpath, cwdlen);
+			retval[cwdlen] = '/';
+			retval[cwdlen + 1] = '\0';
+		}
+	}
+	else
+	{
+		/*  hbmenu should give us the full path of the application, this may
+		 *  reside in a subfolder. Higher level code will strip away the name
+		 *  and extension.
+		 */
+		return NULL;
+	}
+
+	if (!retval)
+		/* Last resort: use `/3ds` directory. */
+		retval = __PHYSFS_strdup("/3ds/");
+
+	return retval;
+} /* __PHYSFS_platformCalcBaseDir */
+
+char *__PHYSFS_platformCalcPrefDir(const char *org, const char *app)
+{
+	char *retval = NULL;
+	size_t len = 0;
+
+	/* Use the jail directory (hopefully) found before. This way we do not
+	 *  need to add an application folder, because it is exclusive.
+	 */
+	const char *envr = __PHYSFS_getUserDir();
+	BAIL_IF_ERRPASS(!envr, NULL);
+	const char *append = ".config/";
+	len = strlen(envr) + strlen(append) + 1;
+	retval = (char *) allocator.Malloc(len);
+	BAIL_IF(!retval, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+	snprintf(retval, len, "%s%s", envr, append);
+
+	return retval;
+} /* __PHYSFS_platformCalcPrefDir */
+
+
+#endif /* PHYSFS_PLATFORM_3DS */
+
+/* end of physfs_platform_3ds.c ... */
diff -NBaur physfs-release-3.2.0/src/physfs_platform_posix.c physfs-release-3.2.0-new/src/physfs_platform_posix.c
--- physfs-release-3.2.0/src/physfs_platform_posix.c	2022-09-30 21:13:07.000000000 +0100
+++ physfs-release-3.2.0-new/src/physfs_platform_posix.c	2023-03-26 16:16:59.634275766 +0100
@@ -23,6 +23,10 @@
 
 #include "physfs_internal.h"
 
+#ifdef PHYSFS_PLATFORM_3DS
+#include <3ds/synchronization.h>
+#include <3ds/thread.h>
+#endif
 
 static PHYSFS_ErrorCode errcodeFromErrnoError(const int err)
 {
@@ -58,6 +62,9 @@
 
 static char *getUserDirByUID(void)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    return __PHYSFS_3DSCalcUserDir();
+#else
     uid_t uid = getuid();
     struct passwd *pw;
     char *retval = NULL;
@@ -78,13 +85,16 @@
             } /* if */
         } /* if */
     } /* if */
-    
     return retval;
+#endif
 } /* getUserDirByUID */
 
 
 char *__PHYSFS_platformCalcUserDir(void)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    return __PHYSFS_3DSCalcUserDir();
+#endif
     char *retval = NULL;
     char *envr = getenv("HOME");
 
@@ -362,27 +372,43 @@
     st->createtime = statbuf.st_ctime;
     st->accesstime = statbuf.st_atime;
 
-    st->readonly = (access(fname, W_OK) == -1);
+#ifdef PHYSFS_PLATFORM_3DS
+    /* shortcut */
+    st->readonly = !(statbuf.st_mode & S_IWRITE);
+#else
+     st->readonly = (access(fname, W_OK) == -1);
+#endif
     return 1;
 } /* __PHYSFS_platformStat */
 
 
+#ifdef PHYSFS_PLATFORM_3DS
+#else
 typedef struct
 {
     pthread_mutex_t mutex;
     pthread_t owner;
     PHYSFS_uint32 count;
 } PthreadMutex;
-
+#endif
 
 void *__PHYSFS_platformGetThreadID(void)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    return (void*)threadGetCurrent();
+#else
     return ( (void *) ((size_t) pthread_self()) );
+#endif
 } /* __PHYSFS_platformGetThreadID */
 
 
 void *__PHYSFS_platformCreateMutex(void)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    RecursiveLock *m = allocator.Malloc(sizeof(RecursiveLock));
+    BAIL_IF(!m, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+    RecursiveLock_Init(m);
+#else
     int rc;
     PthreadMutex *m = (PthreadMutex *) allocator.Malloc(sizeof (PthreadMutex));
     BAIL_IF(!m, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
@@ -395,12 +421,16 @@
 
     m->count = 0;
     m->owner = (pthread_t) 0xDEADBEEF;
+#endif
     return ((void *) m);
 } /* __PHYSFS_platformCreateMutex */
 
 
 void __PHYSFS_platformDestroyMutex(void *mutex)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    allocator.Free((RecursiveLock *)mutex);
+#else
     PthreadMutex *m = (PthreadMutex *) mutex;
 
     /* Destroying a locked mutex is a bug, but we'll try to be helpful. */
@@ -409,11 +439,15 @@
 
     pthread_mutex_destroy(&m->mutex);
     allocator.Free(m);
+#endif
 } /* __PHYSFS_platformDestroyMutex */
 
 
 int __PHYSFS_platformGrabMutex(void *mutex)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    RecursiveLock_Lock((RecursiveLock *)mutex);
+#else
     PthreadMutex *m = (PthreadMutex *) mutex;
     pthread_t tid = pthread_self();
     if (m->owner != tid)
@@ -424,12 +458,16 @@
     } /* if */
 
     m->count++;
+#endif
     return 1;
 } /* __PHYSFS_platformGrabMutex */
 
 
 void __PHYSFS_platformReleaseMutex(void *mutex)
 {
+#ifdef PHYSFS_PLATFORM_3DS
+    RecursiveLock_Unlock((RecursiveLock *)mutex);
+#else
     PthreadMutex *m = (PthreadMutex *) mutex;
     assert(m->owner == pthread_self());  /* catch programming errors. */
     assert(m->count > 0);  /* catch programming errors. */
@@ -441,6 +479,7 @@
             pthread_mutex_unlock(&m->mutex);
         } /* if */
     } /* if */
+#endif
 } /* __PHYSFS_platformReleaseMutex */
 
 #endif  /* PHYSFS_PLATFORM_POSIX */
diff -NBaur physfs-release-3.2.0/src/physfs_platforms.h physfs-release-3.2.0-new/src/physfs_platforms.h
--- physfs-release-3.2.0/src/physfs_platforms.h	2022-09-30 21:13:07.000000000 +0100
+++ physfs-release-3.2.0-new/src/physfs_platforms.h	2023-03-26 16:16:59.634275766 +0100
@@ -69,6 +69,10 @@
 #elif defined(__QNX__)
 #  define PHYSFS_PLATFORM_QNX 1
 #  define PHYSFS_PLATFORM_POSIX 1
+#elif defined(__3DS__)
+#  define PHYSFS_PLATFORM_POSIX 1
+#  define PHYSFS_PLATFORM_3DS 1
+#  define PHYSFS_NO_CDROM_SUPPORT 1
 #elif defined(unix) || defined(__unix__)
 #  define PHYSFS_PLATFORM_UNIX 1
 #  define PHYSFS_PLATFORM_POSIX 1
